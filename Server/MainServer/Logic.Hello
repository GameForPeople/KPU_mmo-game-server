게임 서버 로직을 간단히 정의

0. 게임 서버 생성
{
	A. [Server.cpp] GameServer 생성자 호출

		a. Zone 생성자 호출
			0. MoveManager 생성 
				- 함수 객체
			1. MonsterModelManager 생성
				- Slime, Golem, Dragon 몬스터 모델 생성
			2. SectorCont의 각 Sector 생성자 호출
				- 각 Sector의 index, Center Pos, SectorContUnit 생성
				- SectorContUnit : ClientCont, MonsterCont, clientLock, monsterLock;
			3. ZoneContUnit 생성자 호출
				- GLOBAL_DEFINE::MAX_CLIENT만큼, ClientCont 미리 할당
				- GLOBAL_DEFINE::MAX_MONSTER만큼, MonsterCont 할당
				- Monster 생성 후, 각 섹터에 배치

		b. Server 프로그램의 무결성 체크
			- 프로그램 개발 중 변경사항에 따라, 문제가 될 수 있는 부분 체크

		c. ConnectManager 생성 (SingleTon) 
			- uniqueKeyPool을 GLOBAL_DEFINE::MAX_CLIENT만큼 미리 생성.

		d. SendMemoryPool 생성 (SingleTon)
			- sendMemoryPool을 GLOBAL_DEFINE::MAX_NUMBER_OF_SEND_POOL만큼 미리 생성.

		e. InitNetwork()
			- 윈속 초기화
			- 입출력 완료 포트 생성
			- 워커 쓰레드 생성 및 IOCP 등록
			- Listen Socket 생성
			- 서버 정보 객체 설정
			- Listen Socket 포트 주소 할당.
			- ListenOn!

		f. AcceptQueryServer();
			- AcceptQueryServer가 실행하여 먼저 연결할 때 까지 블로킹!!
			===========================================================================================
			- 접속해온 포트가 GLOBAL_DEFINE::QUERY_SERVER_PORT인지 확인하여, 맞을 경우, 리턴
			- 아닐 경우, 해당 소켓의 접속을 끊고, GLOBAL_DEFINE::QUERY_SERVER_PORT가 날라올때까지 대기

		g. TimerManger 생성 (SingleTon)
			- timerMemoryPool를 GLOBAL_DEFINE::MAX_TIMER_UNIT만큼 미리 생성.
			- timerCont를 TIME::MAX_TIME + a만큼 생성.
			- timerMemoryHeadCont 를  TIME::MAX_TIME + a만큼 생성.

		h. Server UI 출력!
}

1. 게임 서버 Run! (현재는 GameServer 객체 생성 후, 자동으로 진행됨 )
{
	A. [Server.cpp] GameServer Run 함수 호출
		
		a. timerThread 생성
			- std::thread timerThread{ TimerManager::GetInstance()->StartTimerThread };

		b. acceptThread 생성
			-std::thread acceptThread{ StartAcceptThread, (LPVOID)this };

		c. 각 Thread에 대한 Join() 실행
			- timerThread, acceptThread, workerThread
}

2. 클라이언트 접속 요청 시,
{
	A. GameServer::AcceptThreadFunction()에서 WSAAccept()가 리턴됨
		
		a. ConnectManager에 UniqueKey 요청
			0. false일 경우(이미 동접이 Max_User인 상황), 해당 소켓의 접속을 끊음
			1. true일 경우
				- zoneContUnit->ClientContUnit에 해당 키로 들어가, Socket을 넣어줌.
				- 해당 소켓을, 입출력 완료 포트와 연결해줌.
				- 해당 소켓에 대하여, Recv상태를 적용함.


	B. Client에서, Demand Login 정보를 전송하여, GameServer::ProcessPacket의 Login에서 걸림.
		
		a. RecvLogin()이 실행됨
			0. loadedBuffer의 값을 통해 Query Server에 전송할 packet을 제작함
				- UniqueKey값, id값, pw값을 구조체로 담음

			1. NETWORK_UTIL::SendQueryPacket 함수 호출하여 QueryServer에 전송함.

	C. QueryServer에서, Login 관련 처리를 한 후, 데이터를 보내, GameServer::ProcessQueryPacket의 Login관련에서 걸림.

		a. QUERY_TO_MAIN::LOGIN_FALSE이 전송됨.
			0. UniqueKey와 FailReason을 받음
			1. 해당 UniqueKey의 Socket에 대하여, FailReason을 전송해줌.
			2. RecvPacket 상태로 변경.

		b. QUERY_TO_MAIN::LOGIN_TRUE이 전송됨.
			0. 전송받은 UniqueKey를 통해, ZoneContUnit의 해당 ClientContArr로 접속하여, ObjectInfo 변경
				- ObjectInfo : nickName, xPos, yPos

			1. 클라에게 정상적으로 로그인 했음을 알림!
				- MAIN_TO_CLIENT::LoginOk  key, nickName, xPos, yPos

			2. 전송받은 좌표값을 기준으로, zone->Enter을 호출함
				- 들어가야할 섹터에 입장하고.
				- RenewPossibleSectors()이 호출됨
				- RenewViewListInSectors()이 호출됨

			3. RecvPacket 상태로 변경.
}
