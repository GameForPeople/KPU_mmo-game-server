게임서버 9일차. 2019년 4월 9일

	이제 뼈대를 만들었으니까 살을 만들어야하는데 무엇이 중요한가! 퀘스트 아이템! 이런거 아니고 스탠드얼론 게임과 뭐가 다르냐
	구현에 주요할 사항 그거를 살펴보겠다...! 

	MMO 게임 서버는 도대체 뭐가 다르고, 뭐를 신경써야하는가!

	1. 지형!!
		지형을 어떻게 나타낼 것인 가!  2D 게임을 만들까 3D게임을 만들까 고민해야해요...!
		인기순위 오늘자 최고 매출을 보면,,,, 리니지 m , 블레이드 앤 소울, 검은사막,,, 리니지 레볼루션...!
		2D게임이라고 무시하면 안돼요!!

		이거를 게임서버프로그래머가 신경써야해요!!
		서버 프로그래머도 2D, 3D를 신경써야함..! 2D게임하고 3D게임은 난이도가 하늘과 땅차이에요!! 되도록이면 서버게임은 2D로 만들려고 그래요...!

		리니지 레볼루션2, 디아블로3, 스타크래프트2 는 클라이언트 입장에서는 3D지만, 서버입장에서는 2D임!!!
			왜? 어떠한 장애물이 있을 때 이를 넘어갈수 있으면 3D...
		진정한 3D 게임은 -> 테라, 리니지2, 검은사막, 아이온, // 날아다니고, 절벽에서 뛰어내리고, 공간을 3D로 구성할 수 있으면 3D서버임...!

		그래픽만 계단이지, 서버입장에서는 평범한 길!!

		물론 기획자는 3D 게임을 만들고 싶어해요... 하지만 서버쪽에서는 반대를 해요...! (개발 비용과 시간을 쭐이기 위하여!!! 난이도도 오바야!!)
		동굴, 복층, 다리가 있는데, 가다가 아래를 보면 아래층에 사람들이 서로 보이고 상호작용하고 , 뛰어내리고 올라갈 수 있느냐,... 없으면 리니지 2 레볼루션!

		!!!
		2차원 배열과 3차원 배열의 차이.
		2차원 충돌 검사와 3차원 충돌 검사의 속도차이는 엄청나게 큼. 부하도 엄청나게 큼!
		3D로 가는 순간 서버 개발 비용이 엄청나는 것을 말해줘야함!!

	2. 충돌의 멀티쓰레드 세이프니스
		1. 플레이어간의 충돌을 어떻게 처리할 것인가?
			- 허용하면 게임 콘텐츠!!
			- 어 이거 구현하기가 상당히 어려워요... 멀티쓰레드잖어요.....
			- 서버의 부하가 들어나요....

		2. 플레이어와 NPC의 충돌을 어떻게 처리할 것인가?
			- 짜증나죠??? 몬스터들에 둘러싸이면 이동을 못함......
			- 구현은 당연히 통과하는게 구현이 시워요...!
			

		- 어 이거 날로 먹었는데,, 플레이어들끼리 충돌 안해도 되는 구나... 라고 생각을 했어요 <- 교수님!!!

	3. Drop Item으로 인한 부하
		1. item Drop
		2. 시체 루팅 
			- 이건 게임 기획자가 고르는 게 아니라, 서버 프로그래머가 경고해야함...! 아이템  맵에 떨어진다 하나하나가 부하에요...1 동접이 그만큼 쭐어들어요!!
			- 슬라임이라는 몬스터가 돌아다니면서 청소해줌....!
			- 시체 루팅은 비용없음...!

	4. NPC AI 성능!
		딥러닝 뭐 그딴거 전혀 안해요....! 상태머신 그게 AI에요!! 때리면 반격해야죠!! 그게 AI에요...!
		다만 레이드 몬스터 같은 경우, 속성바꾸고 변신하고, 텔레포트하고, 그거는 몇마리 안돼요!! 서버에 큰 부하가 안됨!!
		하지만 이러한 모든 것이 서버에는 부하임...!

		스탠드 얼론 게임에서는 AI가 아무것도 아님, 서버에서는 숫자가 깡패니까, 그거는 감당하기가 힘들어요.... 고민을 해야하고...
		특히 그중 부하를 가장 많이 차지하는 것이 길찾기에요!! 벽을 뚫고 오면 안되죠?? A*를 돌려야하죠?? nLogN 비용이 커요...

		.... 그리고 스크립트!
		보스 몬스터, 컷신 나오고,  NPC들 막 그런거... 그거를 일일히 c++로 만들고 있느냐.. 그런거를 서버프로그래머가 하고 있는거는 오바에요..
		그러니 기획자에게 스크립트로 넘겨야죠...!


	5. 콘텐츠 생산성 : 전투, 퀘스트, 스킬
		1. 멀티쓰레딩에서 죽지 않도록 해야하고,
		2. 생산성 : 전투하다 ㅜ머 그러면 때리고 때리고, 평타있고, 아이템 능력치 빼고, 그걸 일일히 다 코딩을 하고 있다. 안되죠?
			그거를 코딩하지 않고, 밸런스 수정할 수 있어야해요...!
			이런거를 다 콘피규레이션 파일로 할 수 있어야하고, 이 콘피규레이션 파일은 기획팀이 알아서 수정을 할 수 있게 만들어 줘야 해요..!
			파이어볼, 아이스볼, 라이트닝이 있다!! 스킬 테이블에 던지기 이렇게 적으면 ㅏㅇㄹ아서 되도록 해줘야해요...!

	A. 멀티쓰레딩 이슈!

		1. 충돌 : 뚫고 지나가기!
		2. 아이템 루팅 : 동시성 제어! -  어떻게 한명만 주울 수 있도록 할 것인가

	B. BroadCasting 문제! : 제일 처음 해결해야 하는 문제!
		MMO가 재미있는 이유는 여러 사람이 보이기 때문에, 재밌는 거에요! 아 여기 나혼자 있지 않구나, 쓸쓸함을 느끼지 않고, 말도 걸고, 사람이 부대끼는 사회가 되니까 재밌는 거에요!!

		그래서 클라이언트에서, 게임월드의 상황을 보여줘야 해요!! 나무니 바위니 이런거는 다 클라이언트에서 보여주는 거에요!!
		서버는 이 플레이어의 x, y 좌표가 어디다, 어 클라이언트 패키지 안에 전체 월드의 크래픽 데이터가 있고, x, y좌표에 따라 출력해줌!!

		초보자들이 오해하는 것이 하나가 있는데, 나무다 돌이다, 집이다 이런거는 서버가 보내주는 게 아니에요... 서버는 그렇게 한가하지 않아요!!

		다른 오브젝틀의 상태( 애니메이션 ) 등을 보여줘야해요!

		오브젝트의 상태를 주위에 있는 클라이언트에게 보내줘야함 ( 하나의 오브젝트의 상태가 변경되면, 주위에 존재하는 모든 아바타에게 변경 내용을 전송해야함!)
	
	동접이 N일 때, N * N의 패킷이 필요...!
		1초에 1번 이동, 동접 5000이면 25M packet / sec
		
		패킷 하나 보내는데, 1000에서 5000클럭이 걸림...? 레알로? 처음알았네... 25GHZ 필요.....
		패킷당 20바이트라면, 1초에 4Gbps bandwith!! 가 필요함... 1초에 1번도 절대 못함...

		아무리 서버가 좋아도 감당할수 없음!

	해결!
		근처의 object만 보여준다. ( 시야처리를 함! )
		서버의 부하를 확 줄일 수 있음!!

		존이 섹터를 가지고 있음!

		1. Zone
			- 효율적인 검색의 기본
			- 서로 떨어져 있고, 텔레포트를 하거나, 배를 타거나하지 일반적인 방법으로 이어져 있지 않아요!!
			- 전체월드를 존으로 나눠서 따로 관리를 해요...!
			- 다른 월드로 갈때는 보통 심리스 하지 않음!
			- Ex) 대룩, 월드, 인던... 그리고 인던같은 경우는 내부에서 조건 처리 안하고 고냥 브로드 캐스팅함..!

		2. Sector (락을 걸고 업데이트 함)
			- 게임마다 용어가 틀림, cluster이라고 부르는데도 있음..!
			- 섹터는 서버 내부에서 검색 효율성을 위해 도입한 개념이고,
			- 자기 주변에 있는 오브젝트의 리스트를 빨리 얻어내기 위해 사용함...!

			####### 끝쪽에 있을 경우, 최대 4개의 섹터까지 검색해야함!
			####### 섹터의 크기 : 적당히 해줘야함...! 
					- 너무 크면, 병렬성이 떨어짐... (락도 걸어야되고, 개체도 많이 검색됨)
					- 너무 작으면 : 많은 섹터를 검색해야 한다..

			최대 시야보다 조금 큰게 좋겠죠??

		3. 클라이어트와는 아무런 상관이 없는 개념이다.
			멀티쓰레드 자료구조 필요...!!!

		4. 모든 플레이어는 시야라는 개념을 갖고 있다.
			- 시야 밖의 오브젝트에 대한 정보는 클라이언트에 전송되지 않는다.
				무브 패킷은 전체 패킷 통신량의 95%를 차지함..!

			- 이동 방향은, 1. 무브 패킷에 합쳐서 보내거나, 2. 따로 패킷을 파서 보내거나 함!
				-> 보통은 나눠서 보냄!!

		Put Object -> Move Object X n -> RemoveObject
		
		5. PutObject를 해준적이 없는데, 무브를 했다면, 이에 따른 처리가 필요함...!

		------
		서버에는 객체마다 ViewList라는 객체를 모든 플레이어가 관리한다.
			-> ViewList는 클라이언트 츠그이 객체의 생성과 소멸의 기준이 된다.

			-> 시야리스트 업데이트
				- 시야에서 사라진 player에게 removeObject 전송
				- 새로 시야에 들어온 player에게 PutObj 전송
				- 기존 시야리스트에 있는 obj에게 mobeObj 전송

			이 방법만 있는게 아니야!!!!!!!!! 섹터에서 리스트를 관리하는 방법도 있음!!

		------
		이동 알고르즘!
			viewList을 읽고 쓸때는, 락을 걸어라함!! 나를 락을 걸고, 이중 락을 검!!
			두 개의 객체가 있는데, 두개의 주체가 건다면, 데드락이 걸림!!

			그러니 마지막에 다 긑나고 처리를 해야함!!!

			클라이언트마다 갖고 있는 뷰 리스트, 이거를 바탕으로 Put오브젝트를 할지, MoveObject를 할지 검색을 해야함...!

			이동알고리즘의 최적화!!
				1. 시작할 때, viewList를 카피를 해요,
				2. 복사한 리스트를 갖고 처리하고, 나중에 빠져나왓을 떄 락을 걸자.
				3. mutex Lock 대신, RW Lock을 사용할 것! 훨씐 효율적이다! (Read Operation)을 많이 사용하고 있음.

			이동 시 (각 축이 한번에 적용되야하기 때문에) 락을 걸고 처리를 해야함...!
			  	그렇기 때문에 RWLock을 사용함....!
				wlock (쓸때),,,, rLock(읽을 때)....	