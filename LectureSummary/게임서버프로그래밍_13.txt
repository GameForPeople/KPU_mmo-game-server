게임서버 13일차. 2019년 4월 18일

	효율적으로 지형 데이터를 저장해야함..!

	서버 실행 도중에 지형 데이터를 가져오는 것은 옳지 않음! -> 속도 저하!!

	2D 타일 -> 0(1)
	2D 타일 확장 -> 2D 타일하고 큰 차이없고, 0(1) ~ 0(K) K 는 계층 높이
	폴리곤 -> 쪼끔 큰데, 압축 잘하고 쓸데없는 것 없으면 괜찮아...

--
	지현 구현의 이슈...!

	충돌은 어떻게 할거냐, 우리는 충돌검사 말고, 또 뭘해야하죠, 길찾기!!

	내가 여기로 간다. 내가 발딛고있는 폴리곤에서 목표가 발을 딛고 있는 폴리곤까지 길을 찾는거에요
	계산 오버헤드가 커요! 따로 정보를 만들어야 해요!
	이건 뭐냐하면은 Path Node, Path Mesh!!

	문의 구현
		길이 바뀜....! (고정되지 못하는 지형 데이터)
		문은 NPC라고 보는 경우도 있음!! (NPC를 막거나 뚥거나에 따라 다름...)

	이동 가능한 지형...!	
		엘리베이터, 배, 이동 발판..... --> 이런거 머리가 아파짐...! 생각보다 굉장히 까다로워요!!
		WOW 처음에 서로 충돌아노디서 개판이네 했는데, 배잘해서 오 했음

	검색 공간을 쭐일수 있는 방법이 없을 까? (이게 Path Noed) 2D 타일 대부분 충돌하게 되어있는데, 
	이 노드들은 엉성하게 되어있음. 길찾기를 할 때, 하나하나 찾는게 아니라, 노드만 찾아서 이동함.

	그러나 Path 노드보다, PathMesh 활용!!!!!!!!!! 지금은 다 Path Mesh를 활용하고 있어요...!

//////////////// 길찾기 알고리즘 하기 전에, 실습...!

실습~~~~

/////////////
	한번에 한 클라이언트 밖에 안움직여요... 근데 여러 클라이언트에서 움직이면 죽겠죠??
	여러 쓰레드에서 viewList 동시에 업데이트 하고, 멀티쓰레드에서 에러 생겨서 죽죠...

	1.
	ViewList읽고 쓸때 무조건 락을 걸고 읽고 써야돼요...!
	Access하는데가 어디있나.. -> 오른쪽 클릭하고 모든 참조찾기해서 다 수정해줘야해요!!!!

	락을 걸로, 샌드함수 있고,,, 이러면 안돼요.......!!! (오 그렇구만 오바구만!!)
	샌드함수 전에 락을 풀어줘야함...!

	디스커넥트하는데 클리어할때도, Lock, UnLock을 해야함... 안하면 클남...!	 
		
	중간고사 끝나고, 성능 체크를 할 예정... 몇천개의 클라이언트가 돌아갈텐데 락 언락..잘해야함...!

////////////////////
	길찾기

	음 생각을 해보면 A* 돌리고, 그걸 정한다음에 A* 돌리면은, 내가 어디어디어디 지나쳐야겠다.. 길이 나오죠??
	어 3D 폴리곤 같으면은 이 포인트 이포인트 점들이 쭉 나와요...!이걸 따라가면 되겠구나...! 

	NPC이동, SendMovePacket이죠? 이동은 이것을 계속 보내는거에요...
	이걸 몇번을 해야하는가...!

	sendMovePacket을 적절하게 해줘야함... 이 적절한 것이 뭐냐고 물으신다면, 속도!
	이동이 속도가 있어요...!

	속도는 이것의 시간간격, 이동거리죠? 시간 간격이 짧으면 정밀하겠지만 부하가 커지겟죠??
	1초에 10개 보낸다, 1초에 100개 보낸다는애기죠,,,,? 부하가 10배가 됨...

	적당하게 보내야해요... 뭐가 적당하는가??
	사람이 봤을 때, 어색하지 않은 시점에서 최소한 보내야죠...?
	여러번 보내보면서 직접해봐야함!!!

	해봣어요... 게임회사에서...! 0.5초에서 1초!
	이거보다 더드문 드문 보내면 정말 어색하다... 이정도 보내면 어색한 걸 느끼지 못한다.

	다만 클라이언트가 그냥 몬스터를 이동시키면 안되고, 지금 현재 좌표에서 저 좌표까지 정해진 속도로 이동을 해줘야겠죠?
	애니메이션을 하면서! 이동거리는 얼마냐! 속도죠??

	그거는 기획자가 정해놓은 속도가 ㅇㅆ어요... 사람이 걷는 속도가 1초에 1m정도...1
	리얼하게해서, 1m - 1초하면 되게 답답해요...!

	또 추가적으로, 꺽이는 부분마다 넣어줘야함.. 꺽이는 포인트에 찍어줘야해요!!

##	몬스터가 가다가 꺽이는 지점에서 느려질 수 있죠...? 그럴떄마다 안보내주면, 문제가 생김!!

	Step! 
		- 단위 시간에 갈 수 있는 직선상의 위치!!!
		- 다음 타일 : 단위 시간이 가변
		- 방향 전환 점

##	2D 타일 게임은.... 시간간격을 조정해서 속도를 컨트롤 해야함!!!

	Step이 필요한 이유!
		- 패킷 개수 절약, 계산 시간 절약 -> Timer를 통한 이동!
	Timer를 둬서, 까맣게 있고 있다가 1초후에 다시보내고, 이런 방식으로 구현해저야함!!	

	매 스텝마다 다시 길 찾기 필요...! ( 이게 기본!!!!! )
		목표 이동, 지형 변화, 장애물 변화!!
		-> 굉장히 비효율적 아닌가?? 아니에요....!
			-> 저장한게 쓸모없는 경우가 많음( 몬스터는 길이 어케바뀔지 모름...!)
			-> 장애물 변화, 지형 변화...! -> 길찾기 다시 해줘야함!!

	전솔력으로 달리는 속도보다 조금느리게 해야 적장해요... 이거는 머 맞추면되고..!

	길찾기 단위( tile Or Path Node, Natvi Mesh )
		-> 길찾기 실패일 경우, 지형을 바꿔야함...!

	-> 길찾기를 실패할 경우, 힐링을 함.... 와우...!
	-> 한방에 죽일 수 있는실력이다... 어쩔수 없음...!

	그래프의 노드가 무엇인지 정의가 필요함...!
	Tile혹은 미리 찍어놓은 좌표!!
	Weight를 줄 수도 있음...!

## 길찾기 알고리즘...!
	여기서 알고리즘 처음부터 다시하는거는 으미가 없다...!
	어떤 알고리즘을 선택할 것인가?	
	여기서는 꼭 에이스타를 해야하는가?? - 오버로드가 굉장히 커요...!

	크게 가면서 찾기! 미리찾기! 2가지가 있음...

	가면서 찾기 -> 대충 가는 거에요...
	미리 찾기(네이버 맵) -> 다익스트라, 에이스타...등등!!

	NPC 지도 알죠...? 미리찾기가 맞긴 한데,,,,, 가면서 찾기는 CPU를 적게 써요....

	모든 몬스터가 길을 잘 찾아야 하는 가?? -> 필요없엌ㅁㅋㅋㅋㅋㅋㅋ

	보통 그냥 직선이니, 대충 찾앋 찾아요?? (미로, 미궁같은거 아니면!!)

	가다가 부딪히면 방향바꿔서가면 되죠??..


	가면서 찾기 -> O(1)
		- 다음 경로점 -> 랜덤, 장애물 따라 돌기, 직선 찾아 돌기...
			랜덤 : 붕어한테 어울리는.....
			장애물 따라 돌기 : 장애물만나면 한방향으로 쭉~~
			직선 찾아 돌기 : 장애물이 있을 때, 장애물을 따라 돌아요..( 백퍼센트 길을 찾아요)

	미리 찾기
		- 똑똑한 NPC에는 필수...
		DFS -> 노답... (IDDF) 최대 길이를 정해줌...! 
		BFS ->
			기본 BF 검색량이 N2
			biDre~~ 검색량 N2 / 2
			다익스트라.. -> 시작점부터 주위 노드를 다 검색해서 가장 가까운 노드를 찾음.. 
					-> 돌리면 N2으로 찾음( 정확히는 N2보다 쪼금 작음) -> 비효율적...!
			그래서 나온 BFS -> A*
				-> 다익 스트라 알고리즘을 휴리스틱 값을 넣어서 개선...!
				-> 게임같은 경우, 타깃이 어느방향에 있는지 대충 알 수 있죠??
				-> 에이스타에서 h(n)은 대충줘도 반드시 최소거리를 찾는 다는 것이 증명이 됨!!!(그래프가예쁘게생겼을떄)


		그럼 우리는 A*알고리즘을 서야함.... 간단한 다른 알고리즘으 ㄴ문제가 있기 떄문에...	

	
		