게임서버 12일차. 2019년 4월 16일

	일반 게임하고 MMO 게임하고, 물량 차이가 너무 크다. 따라서 MMO는 최적화가 필요하다.

	이에 따라 시야처리 (Brood Cast)를 해야한다!



	그리고 지난 시간에 실습하던거, 올려놨어요. 강의자료실에 보면은 2019 PT 서버라고 올라와 있고, 패스워드가 있어요 패스워드 : "다음주이다"

	---

	다음주 4월 23일 화요일 중간고사 -> 이때 처리함. 
	다음주 4월 25일 수업.... -> NDC 당첨(휴강), 탈락(정상수업)

	----


	그러면 이제 우리가 무엇을 해야하는가 ( 실습은 목요일에 하기로 하고 )

	NPC와 지형!

		Non Playing character!
		예) 몬스터, 상점 주인, 퀘스트 의뢰인
		-> 서버 컴퓨터가 조작 : 인공지능 필요! ( 딥러닝을 활용한 그딴거 아님 )

		인공지능이란?
			- 재미있는 행동/ 반응

			- 재미 
			   - 재미있으려면 어떻게 해야하나, 내가 꼭꼭 숨었는데, 몬스터가 와서 때린다!, 그러면 재미가 없어요...!
				-> Cheating사용은 재미를 떨어 뜨림
				-> 너무 잘해도 곤란 : 몬스터의 존재 목적은 플레이어에게 "멋있게 썰리는 것"

			- C++로 구현한다!! -> 일이 너무 많아요..... 그거 일일히 다 구현을 한다.. 시간이 많이 걸릴뿐더러, 굉장히 짜증나고 귀찮죠...
			- 인공지능은 서버프로그래머가 짜는게 아니에요... 기획자가 짜죠??? 너무 오버헤드가 크기 때문에, 
			- 인공지능의 구현은 보통 스크립트로 만들어서 기획자에게 떠넘겨요!!
			
			- 그래서 Script로 구현! -> 그러나 성능이 후짐...
				모든 행동을 스크립트로 구현하면 성능이 많이 느려, 시간이 많이 걸리는, 길찾기, 적인식등은 C계열 언어로 작성...!

			길찾기, 적인식등 복잡한 인공지능은 C로 작성...!

		스크립트 
			5월말쯤에 실습해볼 것이고,
			서버 리부팅 필요없이 작동하도록 함...!


		NPC AI를 어덯게 구현되도록 할 것인가!
			-> 서버 프로그래머는 전체 AI를 구현하지 않음!! 

		건드리지 않아도 동작을 하기 위해서는, 스스로 주위에 누가있는지 검색을 해야해요.. 그런데 이는 서버에 막강한 부하를 줌... NPC가 너무 많아요....

		플레이어가 건드리지 않았다... 그런데 서버가 건드리는 거에요...!
		플레이어가 이동하면서, 가까이 있으면 깨워줌!!

		플레이어는 북치면서 내가왔다 내가왔다하는거에욬ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ그러면 몬스터가 때리면서 환영해줌!!!

		##########다만 플레이어가 이동할 때 뿐만 아니라,, 플레이어 생성, NPC생성시 검사 필요!!

		NPC 구현!!

		NPC 서버를 따로 구현하는가?

		NPC 서버 구현의 장점 [ 무시 못할 장점이에요 ]
			: 안정성 : NPC 모듈이 죽어도 서버 정상 작동
			: 부하 분산 : 메모리 & CPU!

		NPC 서버 구현의 단점
			: 통신 overHead
			: 공유 메모리 참조로 끝날일이 패킷 통신으로 악화!
			: 서버 입장에서는 NPC도 플레이어와 비슷한 부하!	

		어떻게 하느냐,, CPU가 굉장히 느렸을 때는, 메인서버가 AI까지 감당이 안되서 분리를 하는 게 정답이였어요...!
		지금은 CPU, 코어개수가 엄청 늘어났죠?? 이정도 부하는 감당할 수 있겠다....!

		근래에는 이거 통신하는 오버헤드가 더 크다,,, 메인 서버에서 AI를 다했어요........... 근데...

		NPC가 나와서 멍하니 있다가 칼질하고, 멍하니 있다가 칼질하고.. 이런거는 점점 오바라 NPC의 AI 하나하나를 강화하기 위해서는, 다시 분리함!!!
		인던이나 특수한 던전 등에서는 NPC의 AI를 더 늘려서 다른 서버에서 구현함!!

		이를 NPC서버보다는 인던서버라고 부름!!

		---
	서버 분리...! 이동!
		MMO 게임에서 아바타 이동을 어떻게 구현할 것인가...!

		WASD로 이동 시 따로 서버를 분리할 필요 없음!

			실제게임에서는 화살표를 누르는 순간 클라이언트에서 이동을 함...! 일단 이동을 하고 봄(빠른 응답속도를 위해서)
			그러면 서버는 무얼 하는가, 이동 패킷을 받죠? 서버는 그 클라가 이동하고 있다는 것을 알아요..!
		
			그러면서, 이동 가능 여부 검사(장애물 검사)...!, 속도 검사 등에서 적합할 경우, 주위 클라에게 알려주고,
			아닐 경우 그 클라에게 야 너 이상해 가지마!! 라고 말해줘야함!!!

		마우스일 경우...! 길찾기 굳이 서버에서 할 필요 없음...! 클라에서 하고, 그 결과를 전송해줘...!

		그런데 NPC일 경우.... 서버에서 해야함...!	클라이언트가 하면 절대 안돼요!
		몬스터가 싸울 때, 바로 앞에서 맞짱뜨는 경우는 거의 없죠...? 
			-> 따라서 서버가 지형과 장애물을 알아야 한다.

		따라서 서버를 구현할 때, 지형과 장애물을 어떠한 자료구조로 저장할 것인가를 결정을 해야해요....

		어떻게하면 효율적으로 메모리에 올려놓을 것인가.... 클라는 상관없는데, 서버는 그러면 안돼요....!

	--------------
		지형을 구현할 때, 2D로 구현할 것인가, 3D로 구현할 것인가!! 

			2D의 경우, 지형정보를 타일 형식으로 모두 저장함...!

			전체를 2차원 배열로 저장함...!! 1번 그냥 깡으로 다 저장함..!
			2번 하나의 칸마다, 동서남북 갈수 있는 여부를 나타낼 수 있음..!
			이러한 한 칸 한칸을 CELL 셀이라고 불림...!

			서버는 모든 좌표를 정수로 갖고있어야함...!
			각 초에 높은 프레임으로 위치를 전송한다 ->  따라서 딜레이가 있다...
			
			장매물을 사람이 찎줘요!! --> 사람이 찍다보니 한계가 있음...!

			이거는 QA팀이 감-검수를 해야함...!


		하지만 이제 유행이 바꼇죠........??????

			우리는 풀 3D로 MMO를 만들겠다...!!

			클라이언트는 그냥 만들면 돼요...!

			서버 프로그래머들에게는 큰 일이 떨어진거에요...!

			3D지형을 어떻게 표현할 것인가....! 길찾기는 어떻게 할것인가....고민에 빠져요....

			서버는 이게 문제죠.... 이 난관을 어떻게 해결할 것인가....

		그래서 맨 처음 나온 해결 방식이 확장 타일....!

			건물의 2층, 복잡한 던전, 다리!!등이 있을 때, 이동 시 높이 검사, 기울기 검사, 머리부딪힘 검사가 필요...!

			충돌 검사용 데이터 자동 생성 필수!! 3D로 찍을 수 있는 디터를 만든다...! 2D 지형은 한번 만들면 수정이 잘 안되는데, 3D  수정이 많은 듯...!

			2000년대 초반에, L2, 확장팩,,(크루마 섬) 열심히 만들어서 서비스를 하려고 해쓴ㄴ데, 서버가 로딩이 아노대요... 저 지혀엗이터를 추가하는데 메모리를 너무 많이 먹어서...
			1년동안 확장팩을 내지 못했어요.... 그랬는데 64비트 윈도우를 만들어 줘서.. 이를 컴파일해서 올릴 수 있었어여....!

		그러나 이거는 낭비가 심하다...

			99프로가 공기인데...? 굳이 이를 구현을 해야하는갘ㅋㅋㅋㅋㅋㅋㅋ 공기가 99프로인 ㅋㅋㅋㅋㅋㅋㅋ

			이를 극복하기 위해 Sparse Matrix로 구현한다... 2차원 배여링 있다...  여기서 0이 아닌 친구들을 찾아서 링크드 리스트로 만들음,..!

		그러나 O(N) 아... 이것도 안되겠다...

			타일 방식...3D로 하기에는 너무 심하다...!

			확장 타일 방식으로 구현하자!!

		전체 월드를 보면은 95%가 단층이에요...!
			위 아래가 있는게 얼마 안돼요...! 그냥 2D 타일 방식으로 기본 지형을 갖고 있고,
			3D오브젝트는 따로 뺴서 체크하자!!

		3D 월드를 만드는데, 3D 에디터로 만들기 떄문에 바둑판에 맞아들어가지 않음... 굉장히 어색함...!!
			그래서 플로팅 포인트로 해야된다...


		그러면 두번째 문제가 생기죠... 이 타일을 어떻게 찍느냐....!

			서버에 지형을 올릴때, 3차원 스캔을 해요...! 50메가바이트가 걸리던것이 한 1.5로 늘어났어요....! (용납 가능한 수준)

			기본 타일이 있는데, 2층, 3층이 이쓴ㄴ 부분은 별도로 마킹을 하도록 함...


		확장 타일의 단점 : 부자연스러워요...! 타일 방식이지만 플레이엉나 객체  배치를 할 때, 정수로 배치하면, 너무 어색해 보인다....
				클라이언트와 서버의 충돌이 맞지가 않음.... 불일치....!

	
		그래서 그 대안으로, 폴리곤 방식이 나옴....
			타일 만들고, 이러한 필요가 없음.......
			클라이언트의 비주얼 데이터를 그래도 사용...! 문제는 메모리와 속도.....

			먼저 폴리곤의 데이터를 단순화하자!!
			삭제 : 노멀 벡터 ,UV값, 텍스쳐!!
			삭제 : 통과 가능한 Object.. (풀, 안개, 커튼) -> 이런 것들 다 지움...!
			평면 폴리곤들의 병합...!

			이렇게 줄이면 서버에 올릴수 있음..!!

		최신 클라이언트들은 collision Polygon 따로 요구...! 굳이 따로 작업할 필요 없음...!

		클라이언트와 똑같은 물리엔진이 필요함...!!

		Tile 방식에 비해 속도는 떨어지지만 확장성 증가...!

		길찾기하는데 n log n....! 그대로 쓸 수 없다...


	--- 지형 구현..
		2D 타일
		2D 타일 확장
		폴리곤...!